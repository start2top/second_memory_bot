from aiogram.types import Message, PhotoSize, Document
from aiogram.filters import Command
from services.openai_client import analyze_text, analyze_image, analyze_document
from services.google_sheets import save_to_sheet
import logging

logger = logging.getLogger(__name__)

async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "üìö –ë–æ—Ç '–í—Ç–æ—Ä–∞—è –ø–∞–º—è—Ç—å'\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:\n"
        "- –¢–µ–∫—Å—Ç - –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è\n"
        "- –§–æ—Ç–æ - –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞\n"
        "- –î–æ–∫—É–º–µ–Ω—Ç (PDF/TXT/DOCX) - –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"
    )

async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n\n"
        "1. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç - —è –µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏ —Å–æ—Ö—Ä–∞–Ω—é\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º - —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏ —Å–æ—Ö—Ä–∞–Ω—é —Ç–µ–∫—Å—Ç\n"
        "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç - —è –∏–∑–≤–ª–µ–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ\n\n"
        "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ!"
    )

async def handle_text(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        analysis = analyze_text(message.text)
        
        data = {
            "type": "–¢–µ–∫—Å—Ç",
            "description": analysis['summary'],
            "tags": ", ".join(analysis['tags']),
            "raw_text": message.text[:1000]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
        }
        
        save_to_sheet(data)
        
        await message.reply(
            f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {analysis['summary']}\n"
            f"üè∑ –¢–µ–≥–∏: {', '.join(analysis['tags'])}"  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
        )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_photo(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        photo = message.photo[-1]  
        await message.answer("üñº –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        # –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        analysis = analyze_image(photo.file_id)
        
        data = {
            "type": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            "description": analysis['summary'],
            "tags": ", ".join(analysis['tags']),
            "raw_text": analysis['extracted_text'][:1000]
        }
        
        save_to_sheet(data)
        
        await message.reply(
            f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!\n\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {analysis['summary']}\n"
            f"üè∑ –¢–µ–≥–∏: {', '.join(analysis['tags'])}\n"  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
            f"üìñ –¢–µ–∫—Å—Ç: {analysis['extracted_text'][:300]}..."
        )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

async def handle_document(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞"""
    try:
        doc = message.document
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç {doc.file_name} –æ—Ç {message.from_user.id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not doc.file_name:
            await message.reply("‚ùå –§–∞–π–ª –±–µ–∑ –∏–º–µ–Ω–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            return

        file_ext = doc.file_name.lower().split('.')[-1]
        supported_ext = ['pdf', 'txt', 'docx', 'doc']
        
        if file_ext not in supported_ext:
            await message.reply(
                f"‚ùå –§–æ—Ä–º–∞—Ç .{file_ext} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n"
                f"üìå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤: {', '.join(supported_ext)}"
            )
            return

        await message.answer(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç {doc.file_name}...")
        
        try:
            # –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            analysis = analyze_document(doc.file_id)
            
            data = {
                "type": f"–î–æ–∫—É–º–µ–Ω—Ç ({doc.file_name})",
                "description": analysis['summary'],
                "tags": ", ".join(analysis['tags']),
                "raw_text": analysis['extracted_text'][:1000]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
            }
            
            save_to_sheet(data)
            
            await message.reply(
                f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {analysis['summary']}\n"
                f"üè∑ –¢–µ–≥–∏: {', '.join(analysis['tags'])}\n"
                f"üìñ –¢–µ–∫—Å—Ç: {analysis['extracted_text'][:300]}..."
            )
            
        except Exception as analysis_error:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {analysis_error}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.")

    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")